#include <iostream>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

using namespace std;

#define BUFLEN 100


#define SUCCESS 100000
#define LOGIN_BRUTE_FORCE -8
#define ALREADY_LOGGED_IN -2


#define QUIT_CMD 10
#define DEFAULT_CMD 1

/*
 * All about server socket
 */
int sockfd;
int client_file_fd;
struct sockaddr_in server_addr;

/*
 * Variables for local purposes
 */
int result;
char buffer[BUFLEN];

/*
 * For select call
 */
int fdmax;
fd_set original;
fd_set modified;


int get_command_code(char *command)
{
	char copy[BUFLEN];
	char *tok;
	memset(copy, 0, BUFLEN);
	memcpy(copy, command, BUFLEN);
	tok = strtok(copy, " \n");
	if (strcmp (tok, "quit") == 0) {
		return QUIT_CMD;
	}
	return DEFAULT_CMD;
}

bool check_buffer_empty(char *buffer)
{
	char copy[BUFLEN];
	char *tok;

	memset(copy, 0, BUFLEN);
	memcpy(copy, buffer, BUFLEN);
	tok = strtok(copy, " \n");
	if (tok == NULL)
		return true;
	return false;
}

void write_log(char *buff)
{
	write(client_file_fd, buff, strlen(buff));		
}

int main(int argc, char ** argv)
{
	if (argc <= 2){
		perror("./client <server IP> <server PORT> \n");
		exit(1);
	}


	/*
	 * Socket open
	 */
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd <= 0) {
		perror ("Cannot open client socket");
		exit(1);
	}

	/*
	 * Setup the socket
	 */
	server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = inet_addr(argv[1]);
	server_addr.sin_port = htons(atoi(argv[2]));

	/*
	 * Connect to server
	 */ 

	int size = sizeof(server_addr);
	result = connect(sockfd, (struct sockaddr *) &server_addr, size);
	if (result < 0) {
		perror("Cannot connect to server ");
		exit(1);
	}

	/*
	 * Create the client file
	 */

	int pid = getpid();
	char name[BUFLEN];
	sprintf(name, "client-%d.log", pid);
	client_file_fd = open(name, O_CREAT | O_TRUNC | O_RDWR | O_APPEND , 0644);
	FILE * client_file = fdopen(client_file_fd, "rw");
	if (client_file == NULL)
		perror("Cannot create file");

	char buffer[BUFLEN];
	char prompt[BUFLEN];
	memset(buffer, 0 , sizeof(buffer));
	memset(prompt, 0 , sizeof(prompt));

	/*
	 * Do what select is meant to do
	 */
	FD_SET(STDIN_FILENO, &original);
	FD_SET(sockfd, &original);
	if (sockfd > fdmax)
		fdmax = sockfd;

	while(1) {

		memset(buffer, 0, BUFLEN);
		//modified = original;
		fputs(prompt, stdout);
		fputs(">", stdout);
		fflush(stdout);
		fgets(buffer, BUFLEN, stdin);
		/*
		 * Listen for commands
		 */
		//result = select(fdmax + 1, &modified, NULL, NULL, NULL);
		//if (result < 0) {
		//	perror("Error in select \n");
		//	exit(0);
		//}
		
		//for (int i = 0; i <= fdmax; ++i) {
			/*
			 * If I need to read from stdin
			 */
			//if (i == STDIN_FILENO) {
				//read(STDIN_FILENO, buffer, BUFLEN);
				if (check_buffer_empty(buffer))
					continue;

				/*
				 * Quit
				 */
				if (get_command_code(buffer) == QUIT_CMD) {
					close(sockfd);
					exit(0);
				}
				/*
				 * Send the command to server
				 */
				send(sockfd, buffer, strlen(buffer), 0);
				/*
				 * Log the command
				 */
				write_log(buffer);
			//}
			
			//else if (i == sockfd) {
		    	
				recv(sockfd, buffer, BUFLEN, 0);
				printf("Received = %s\n", buffer);
				switch (atoi(buffer)) {
					case SUCCESS:
					{
						printf("Login successful \n");
						/*
						 * Get username from server for prompt
						 */
						memset(buffer, 0 , BUFLEN);
						//recv(sockfd, prompt , BUFLEN, -1);
						//printf("Prompt = %s\n", prompt);
						break;
					}
					case LOGIN_BRUTE_FORCE:
					{
						printf("-8 Brute force detectat\n");
						break;
					}
					case ALREADY_LOGGED_IN:
					{
						printf("-2 Sesiune deja deschisa\n");
						break;
					}
					case DEFAULT_CMD:
					{
						continue;
						break;
					}
					default:
						printf("Received = %s\n", buffer);
						break;
				}
			//}

			//else {
				//memset(buffer, 0, BUFLEN);
				//result = read(sockfd, buffer, BUFLEN);
				//if (result <= 0) {
				//	perror("Error when client receiving\n");
				//}
				//printf("Received %s from %d \n", buffer, sockfd);
			//}
		//}
	}

	fclose(client_file);
	close(client_file_fd);

	return 0;
}

